generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

// INDEXED DOCUMENTS / VECTOR DB;  pgvector/pgvector-setup.ts will create the index (since not supported by prisma yet) `npm run db:init-pgvector`
model Document {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  s3ObjectName   String
  originalPath   String
  publicPath     String?
  mediaName      String
  documentChunks DocumentChunk[]
}

model DocumentChunk {
  id                   String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text                 String
  textEmbedding        Unsupported("vector(768)")?
  title                String
  mediaType            String
  documentId           String                      @db.Uuid
  document             Document                    @relation(fields: [documentId], references: [id])
  metadata             DocumentChunkMeta?
  starredDocumentChunk StarredDocumentChunk[]
}

model DocumentChunkMeta {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start           Float?
  end             Float?
  s3ObjectName    String?
  pageNumber      Int?
  bbox            Json?
  question        String?
  answer          String?
  type            String?
  title           String?
  description     String?
  url             String?
  documentChunkId String        @unique @db.Uuid
  documentChunk   DocumentChunk @relation(fields: [documentChunkId], references: [id])
}

// STARREDDOCUMENTCHUNK
model StarredDocumentChunk {
  id              String        @id @default(cuid())
  keyword         String
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  documentChunkId String        @db.Uuid
  documentChunk   DocumentChunk @relation(fields: [documentChunkId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([userId, documentChunkId, keyword]) // Ensure a user can star a DocumentChunk with a specific keyword only once
}

// COMMENTS

model CommentThread {
  id        String    @id @default(cuid())
  comments  Comment[]
  chapterId String
  chapter   Chapter   @relation(fields: [chapterId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id              String         @id @default(cuid())
  message         String
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  commentThread   CommentThread? @relation(fields: [commentThreadId], references: [id])
  commentThreadId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// COURSE >>>
model Chapter {
  id              String           @id @default(cuid())
  title           String
  themeId         String?
  theme           Theme?           @relation(fields: [themeId], references: [id])
  content         Json // TipTap output
  skills          Skill[]
  tags            Tag[]
  blocks          Block[]
  educationLevels EducationLevel[]
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  commentThread   CommentThread[]
}

model Theme {
  id       String    @id @default(cuid())
  title    String
  chapters Chapter[]
}

model Skill {
  id       String    @id @default(cuid())
  title    String
  chapters Chapter[]

  @@unique([title])
}

model KeyIdea {
  id     String  @id @default(cuid())
  title  String
  blocks Block[]

  @@unique([title])
}

model Tag {
  id          String     @id @default(cuid())
  title       String
  description String
  chapters    Chapter[]
  blocks      Block[]
  activities  Activity[]

  @@unique([title])
}

model Block {
  id         String     @id @default(cuid())
  title      String
  tags       Tag[]
  keyIdeas   KeyIdea[]
  activities Activity[]
  content    Json // TipTap output
  chapterId  String
  chapter    Chapter    @relation(fields: [chapterId], references: [id])
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Activity {
  id        String   @id @default(cuid())
  title     String
  content   Json // TipTap output
  tags      Tag[]
  blockId   String
  block     Block    @relation(fields: [blockId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EducationLevel {
  id        String   @id @default(cuid())
  name      String
  Chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId String?

  @@unique([name])
}

// USER FILES

model File {
  id           String     @id @default(cuid())
  description  String
  author       String
  s3ObjectName String
  fileTypes    FileType[]
  extension    String
  shared       Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  User         User?      @relation(fields: [userId], references: [id])
  userId       String?
}

model FileType {
  id     String  @id @default(cuid())
  name   String
  File   File?   @relation(fields: [fileId], references: [id])
  fileId String?
}

// USERS
model User {
  id            String                 @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String?                @unique
  emailVerified DateTime?
  image         String?
  password      String?
  files         File[]
  Account       Account[]
  Session       Session[]
  chapters      Chapter[]
  blocks        Block[]
  activities    Activity[]
  Comment       Comment[]
  starred       StarredDocumentChunk[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
