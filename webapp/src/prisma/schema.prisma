generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model Document {
  id             String          @id @default(cuid()) @db.Uuid
  s3ObjectName   String
  originalPath   String
  publicPath     String?
  mediaName      String
  documentChunks DocumentChunk[]
}

model DocumentChunk {
  id                   String                 @id @default(cuid()) @db.Uuid
  text                 String
  textEmbedding        Unsupported("vector")?
  test                 String                 @default("test")
  title                String
  mediaType            String
  documentId           String                 @db.Uuid
  document             Document               @relation(fields: [documentId], references: [id], onDelete: Cascade)
  metadata             DocumentChunkMeta?
  starredDocumentChunk StarredDocumentChunk[]
}

model DocumentChunkMeta {
  id              String        @id @default(cuid()) @db.Uuid
  start           Float?
  end             Float?
  s3ObjectName    String?
  pageNumber      Int?
  bbox            Json?
  question        String?
  answer          String?
  type            String?
  title           String?
  description     String?
  url             String?
  documentChunkId String        @unique @db.Uuid
  documentChunk   DocumentChunk @relation(fields: [documentChunkId], references: [id], onDelete: Cascade)
}

model StarredDocumentChunk {
  id              String        @id @default(cuid())
  keyword         String
  userId          String
  comment         String        @default("")
  documentChunkId String        @db.Uuid
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  documentChunk   DocumentChunk @relation(fields: [documentChunkId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, documentChunkId, keyword])
}

model StarredBlock {
  id        String   @id @default(cuid())
  keyword   String
  userId    String
  comment   String   @default("")
  blockId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  block     Block    @relation(fields: [blockId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, blockId, keyword])
}

model CommentThread {
  id        String    @id @default(cuid())
  chapterId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  chapter   Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model Comment {
  id              String         @id @default(cuid())
  message         String
  userId          String
  commentThreadId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  commentThread   CommentThread? @relation(fields: [commentThreadId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chapter {
  id                     String           @id @default(cuid())
  status                 ChapterStatus    @default(DRAFT)
  title                  String
  content                Json
  skillsAndKeyIdeas      String           @default("")
  additionalInformations String           @default("")
  coverPath              String?
  userId                 String
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  blocks                 Block[]
  theme                  Theme?           @relation(fields: [themeId], references: [id])
  themeId                String?
  user                   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentThread          CommentThread[]
  educationLevels        EducationLevel[]
  skills                 Skill[]          @relation("ChapterToSkill")
  tags                   Tag[]            @relation("ChapterToTag")
  schoolSubject          SchoolSubject?   @relation(fields: [schoolSubjectId], references: [id])
  schoolSubjectId        String?
}

model Theme {
  id       String    @id @default(cuid())
  title    String    @unique
  chapters Chapter[]
}

model Skill {
  id       String    @id @default(cuid())
  title    String    @unique
  chapters Chapter[] @relation("ChapterToSkill")
}

model KeyIdea {
  id     String  @id @default(cuid())
  title  String  @unique
  blocks Block[] @relation("BlockToKeyIdea")
}

model Tag {
  id          String     @id @default(cuid())
  title       String     @unique
  description String
  activities  Activity[] @relation("ActivityToTag")
  blocks      Block[]    @relation("BlockToTag")
  chapters    Chapter[]  @relation("ChapterToTag")
}

model Block {
  id            String                 @id @default(cuid())
  title         String
  content       Json
  textEmbedding Unsupported("vector")?
  chapterId     String
  userId        String
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  activities    Activity[]
  chapter       Chapter                @relation(fields: [chapterId], references: [id])
  user          User                   @relation(fields: [userId], references: [id])
  keyIdeas      KeyIdea[]              @relation("BlockToKeyIdea")
  tags          Tag[]                  @relation("BlockToTag")
  StarredBlock  StarredBlock[]
}

model Activity {
  id        String   @id @default(cuid())
  title     String
  content   Json
  blockId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  block     Block    @relation(fields: [blockId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  tags      Tag[]    @relation("ActivityToTag")
}

model EducationLevel {
  id       String    @id @default(cuid())
  name     String    @unique
  chapters Chapter[]
  users    User[]
}

model File {
  id           String     @id @default(cuid())
  description  String
  author       String
  s3ObjectName String
  extension    String
  shared       Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String?
  User         User?      @relation(fields: [userId], references: [id])
  fileTypes    FileType[]
}

model FileType {
  id     String  @id @default(cuid())
  name   String
  fileId String?
  File   File?   @relation(fields: [fileId], references: [id])
}

model Academy {
  id   String @id @default(cuid())
  name String
  User User[]
}

model SchoolSubject {
  id      String    @id @default(cuid())
  name    String    @unique
  userId  String?
  User    User?     @relation(fields: [userId], references: [id])
  Chapter Chapter[]
}

model User {
  id              String                 @id @default(cuid())
  firstName       String?
  roles           UserRoles[]            @default([USER])
  school          String?
  lastName        String?
  job             String?
  email           String?                @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  academyId       String?
  Account         Account[]
  activities      Activity[]
  blocks          Block[]
  chapters        Chapter[]
  Comment         Comment[]
  educationLevels EducationLevel[]
  files           File[]
  schoolSubjects  SchoolSubject[]
  Session         Session[]
  starred         StarredDocumentChunk[]
  academy         Academy?               @relation(fields: [academyId], references: [id])
  StarredBlock    StarredBlock[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRoles {
  ADMIN
  REVIEWER
  USER
}

enum ChapterStatus {
  DRAFT
  REVIEW
  PUBLISHED
  DELETED
}
