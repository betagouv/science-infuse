generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// course >>>
model Chapter {
  id           String   @id @default(cuid())
  title        String
  themeId      String?
  theme        Theme?   @relation(fields: [themeId], references: [id])
  introduction String? // TipTap output
  content      String // TipTap output
  skills       Skill[]
  tags         Tag[]
  blocks       Block[]
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Theme {
  id       String    @id @default(cuid())
  title    String
  chapters Chapter[]
}

model Skill {
  id       String    @id @default(cuid())
  title    String
  chapters Chapter[]
}

model Tag {
  id          String     @id @default(cuid())
  title       String
  description String
  chapters    Chapter[]
  blocks      Block[]
  activities  Activity[]
}

model Block {
  id                String             @id @default(cuid())
  title             String
  tags              Tag[]
  activities        Activity[]
  educationalLevels EducationalLevel[]
  content           String // TipTap output
  bilan             String?
  chapterId         String
  chapter           Chapter            @relation(fields: [chapterId], references: [id])
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Activity {
  id        String   @id @default(cuid())
  title     String
  content   String // TipTap output
  tags      Tag[]
  blockId   String
  block     Block    @relation(fields: [blockId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EducationalLevel {
  id     String  @id @default(cuid())
  name   String
  blocks Block[]
}

// course <<<
model User {
  id            String     @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  Account       Account[]
  Session       Session[]
  chapters      Chapter[]
  blocks        Block[]
  activities    Activity[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
